#include "TDNLIB.h"

#include "Camera.h"
#include "CameraState.h"
#include "../AI/Message/Message.h"
#include "../AI/Entity/EntityManager.h"
#include "../AI/State/state.h"



//*****************************************************************************************************************************
//			カメラ初期化・解放
//*****************************************************************************************************************************
void Camera::Initialize()
{
	tdnView::Init();

	// ステートマシン初期化
	m_pStateMachine = new StateMachine<Camera>(this);
	m_pStateMachine->SetGlobalState(CameraGlobalState::GetInstance());// グローバル

	// 初期設定は固定カメラ
	m_pStateMachine->SetCurrentState(FixCameraState::GetInstance());
}

Camera::~Camera()
{
	SAFE_DELETE(m_pStateMachine);
}

//*****************************************************************************************************************************
//			カメラ更新
//*****************************************************************************************************************************
void Camera::Update()
{
	// ★ステートマシン更新
	m_pStateMachine->Update();

	// ビュー情報セット
	tdnView::Set(m_pos, m_target);
}

//*****************************************************************************************************************************
//			カメラアクティベート
//*****************************************************************************************************************************
void Camera::Activate()
{
	tdnView::Activate();
	tdnView::Clear(0x00000000);
}

//*****************************************************************************************************************************
//			ステートマシンのメッセージ
//*****************************************************************************************************************************
bool Camera::HandleMessage(const Message & msg)
{
	return m_pStateMachine->HandleMessage(msg);
}